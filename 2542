class Solution {
    public long maxScore(int[] nums1, int[] nums2, int k) {
        int n = nums1.length;
        long ans = 0;
        
        int[][] pairs = new int[n][2];
        for (int i = 0; i < n; i++) {
            pairs[i] = new int[]{nums2[i], nums1[i]};
        }
        Arrays.sort(pairs, (a, b) -> Integer.compare(b[0], a[0]));

        PriorityQueue<Integer> mp = new PriorityQueue<>();
        long sum = 0;
        for (int i = 0; i < n; i++) {
            int num2 = pairs[i][0];
            int num1 = pairs[i][1];
            mp.add(num1);
            sum += num1;
            if (mp.size() > k) {
                sum -= mp.poll();
            }
            if (mp.size() == k) {
                ans = Math.max(ans, sum * num2);
            }
        }
        return ans;
    }
}

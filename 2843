class Solution {
    public int countSymmetricIntegers(int low, int high) {
        
        int ans =0;
        
       for(int i =low;i<=high;i++){
        int temp =i;
        int count =0;
        while(temp>0){
            count++;
            temp=temp/10;
        }
        if(count%2==0){
            int n = count/2;
            int x =0;
            temp=i;
            int s =0;
            while(x!=n){
                x++;
                s+=temp%10;
                temp=temp/10;
            }
            int s2 =0;
            while(temp>0){
                s2+=temp%10;
                temp=temp/10;
            }
            if(s==s2){
                ans++;
            }
        }
       }
        return ans;
    }
}

******************** ANOTHER APPROCH ***********************
class Solution {
    public int countSymmetricIntegers(int low, int high) {
        int[] arr = new int[10001];

        for (int i = 1; i <= 9; i++) {
            arr[i * 11] = 1;
        }

        for (int f = 1; f <= 9; f++) {
            for (int s = 0; s <= 9; s++) {
                int sum1 = f + s;
                for (int t = 0; t <= 9; t++) {
                    for (int fo = 0; fo <= 9; fo++) {
                        if (t + fo == sum1) {
                            int num = f * 1000 + s * 100 + t * 10 + fo;
                            arr[num] = 1;
                        }
                    }
                }
            }
        }

        for (int i = 1; i <= 10000; i++) {
            arr[i] += arr[i - 1];
        }

        if (low == 0) low = 1;
        return arr[high] - arr[low - 1];
    }
}


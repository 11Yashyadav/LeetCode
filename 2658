class Solution {
    public int findMaxFish(int[][] grid) {
        int n = grid.length;
        int m = grid[0].length;
        int maxFish = 0;
        for (int i = 0; i < n; i++) {
            for (int j = 0; j < m; j++) {
                if (grid[i][j] > 0) {
                    maxFish = Math.max(maxFish, dfs(i, j,grid));
                }
            }
        }
        return maxFish;
    }
    public int dfs(int r, int c, int[][] grid) {
        if (r < 0 || r >= grid.length || c < 0 || c >= grid[0].length || grid[r][c] == 0) {
            return 0;
        }
        int tot = grid[r][c];
        grid[r][c]=0;
        tot+=dfs(r+1,c,grid);
        tot+=dfs(r-1,c,grid);
        tot+=dfs(r,c+1,grid);
        tot+=dfs(r,c-1,grid);
        return tot;
    }
}

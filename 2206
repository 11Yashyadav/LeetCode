***************************** USING FREQUENCY ARRAY  **************************************** [most optimised one ]
class Solution {
    public boolean divideArray(int[] nums) {
        int n = nums.length;
       int [] fre = new int[501];
       for(int i =0;i<n;i++){
        fre[nums[i]]++;
       }
       for(int i =0;i<501;i++){
        if(fre[i]%2!=0){
            return false;
        }
       }
        return true;
    }
}

*************************** USING MAP WITH VALUES FUNCTION *******************************

class Solution {
    public boolean divideArray(int[] nums) {
        int n = nums.length;
        HashMap<Integer,Integer> mp = new HashMap<>();
        for(int i =0;i<n;i++){
            mp.put(nums[i],mp.getOrDefault(nums[i],0)+1);
        }
        for(int a : mp.values()){
            if(a%2!=0){
                return false;
            }
        }
        return true;
    }
}

******************************** USING MAP WITH ENTRYSET*****************************

class Solution {
    public boolean divideArray(int[] nums) {
        int n = nums.length;
        HashMap<Integer,Integer> mp = new HashMap<>();
        for(int i =0;i<n;i++){
            mp.put(nums[i],mp.getOrDefault(nums[i],0)+1);
        }
        for(Map.Entry<Integer,Integer> etr : mp.entrySet()){
            if(etr.getValue()%2!=0){
                return false;
            }
        }
        return true;
    }
}

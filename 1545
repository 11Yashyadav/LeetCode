********************************BRUTE FORCE APPROACH *********************************************

class Solution {
    public char findKthBit(int n, int k) {
        String s = "0";
        for (int i = 1; i < n; i++) {
            s = s + "1" + rev(s);
        }
        return s.charAt(k);
    }
    public static String rev(String s) {
        String ans = "";
        int n = s.length();
        for (int i = n - 1; i >= 0; i--) {
            if (s.charAt(i) == '0') {
                ans = ans + "1";
            } else {
                ans = ans + "0";
            }
        }
        return ans;
    }
}

**************************************** OPTIMIZED APPROACH **********************************
class Solution {
    public char findKthBit(int n, int k) {
        return findKthBitHelper(n, k);
    }

    private char findKthBitHelper(int n, int k) {
        if (n == 1) return '0';
        // Length of the current string S_n = 2^n - 1
        int length = (1 << n) - 1;  // equivalent to 2^n - 1
        int mid = (length / 2) + 1;
        if (k == mid) {
            return '1';
        } else if (k < mid) {
            return findKthBitHelper(n - 1, k);
        } else {
            int mirrorIdx = length - k + 1;
            char bit = findKthBitHelper(n - 1, mirrorIdx);
            return bit == '0' ? '1' : '0';
        }
    }
}

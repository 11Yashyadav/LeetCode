******************************************* MOST OPTIMIZED SOLUTION ******************************************
class Solution {
    public long countInterestingSubarrays(List<Integer> nums, int modulo, int k) {

        int n = nums.size();
        if(k > n) return 0;
         
        int[] count = new int[n + 1];
        count[0] = 1;

        long ans = 0;
        int sum = 0;
        for(int x:nums){
            x %= modulo;
            if(x == k)
                 ++sum;

            sum %= modulo;
            int r = sum - k;
            if(r < 0) r += modulo;
            if(r < n)
               ans += count[r];

            count[sum]++;
        }
        
        return ans;
    }
}

************************ SAME AS OPTIMIZED BUT HERE WE USED HASHMAP INSTEAD OF FREQUENCY COUNT ***********************************************

class Solution {
    public long countInterestingSubarrays(List<Integer> nums, int modulo, int k) {
        long ans = 0;
        Map<Integer, Long> freq = new HashMap<>();
        int preSum = 0;
        freq.put(0, 1L);

        for (int num : nums) {
            if (num % modulo == k) {
                preSum++;
            }

            int mod = (preSum - k) % modulo;
            if (mod < 0) mod += modulo;
            ans += freq.getOrDefault(mod, 0L);
            int currMode = preSum % modulo;
            freq.put(currMode, freq.getOrDefault(currMode, 0L) + 1);
        }

        return ans;
    }
}

**************************************** BRUTE FORCE ****************************************
class Solution {
    public long countInterestingSubarrays(List<Integer> nums, int modulo, int k) {
        long ans =0;
       int n = nums.size();

        for (int i = 0; i < n; i++) {
            for (int j = i; j < n; j++) {
                int count =0;
                for (int t = i; t <= j; t++) {
                    if(nums.get(t)%modulo == k){
                        count++;
                    }
                }
                if(count%modulo == k){
                    ans++;
                }
            }
        }

      return ans ;
    }
}

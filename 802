class Solution {
    public List<Integer> eventualSafeNodes(int[][] graph) {
        int n = graph.length;
        List<Integer> ans = new ArrayList<>();
        Set<Integer> safeNodes = new HashSet<>();
        boolean updated = true;
        while (updated) {
            int prevSize = safeNodes.size();
            for (int i = n - 1; i >= 0; i--) {
                if (safeNodes.contains(i)) continue;
                int[] arr = graph[i];
                if (arr.length == 0) {
                    safeNodes.add(i);
                } else {
                    boolean canBeSafe = true;
                    for (int j = 0; j < arr.length; j++) {
                        if (!safeNodes.contains(arr[j])) {
                            canBeSafe = false;
                            break;
                        }
                    }
                    if (canBeSafe) {
                        safeNodes.add(i);
                    }
                }
            }
            
            updated = (safeNodes.size() > prevSize);
        }
        ans.addAll(safeNodes);
        Collections.sort(ans);  
        return ans;
    }
}

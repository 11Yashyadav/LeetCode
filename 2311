class Solution {
    private int getLastValidOneIndex(String s, int k) {
        int n = s.length();
        int lastOne = -1;
        long sum = 0, j = 1;
        for (int i = n - 1; i >= 0; i--) {
            if (j > k) {
                break;
            }
            if (s.charAt(i) == '1') {
                sum += j;
                if (sum > k) {
                    break;
                }
                lastOne = i;
            }
            
            j *= 2;
        }
        
        return lastOne;
    }
    public int longestSubsequence(String s, int k) {
        int n = s.length();
        int lastOne = getLastValidOneIndex(s, k), zero = 0;

        for (int i = 0; i < n; i++) {
            if (s.charAt(i) == '0') {
                zero++;
            }
        }
        //System.out.println(zero);
        if (lastOne == -1) {
            return zero;
        }

        for (int i = lastOne; i < n; i++) {
            if (s.charAt(i) == '1') {
                zero++;
            }
        }
        return zero;
    }
}

******************************************************* MOST OPTIMISE APPROACH**********************************************************************
class Solution {
    public int minLength(String s) {
        char[] stack = new char[s.length()+1];
        int last = -1;
        for (char c : s.toCharArray()) {
            if (last > -1 && (c == 'B' && stack[last] == 'A' || 
                                     c == 'D' && stack[last] == 'C')) 
            {
                last--;
            } else {
                last++;
                stack[last] = c;
            }
        }
        return last+1;
    }
}
*************************************************************************************************************************************************
********************************************************** using StringBuilder*******************************************************************
class Solution {
    public int minLength(String s) {
        StringBuilder str = new StringBuilder();
        int n = s.length();
        
        for (int i = 0; i < n; i++) {
            char current = s.charAt(i);
            int len = str.length();
            if (current == 'B' && len > 0 && str.charAt(len - 1) == 'A') {
                str.deleteCharAt(len - 1);  // Remove 'A' when "AB" pair is foun
            } else if (current == 'D' && len > 0 && str.charAt(len - 1) == 'C') {
                str.deleteCharAt(len - 1);  // Remove 'C' when "CD" pair is found
            } else {
                str.append(current);
            }
        }
        return str.length();
    }
}
*******************************************************************************************************************************************************
****************************************************** 2nd APPROACH************************************************************************************
import java.util.Stack;
class Solution {
    public int minLength(String s) {
        Stack<Character> str = new Stack<>();
        int n = s.length();
        for (int i = 0; i < n; i++) {
            char current = s.charAt(i);
            if (current == 'B' && !str.isEmpty() && str.peek() == 'A') {
                str.pop(); 
            } else if (current == 'D' && !str.isEmpty() && str.peek() == 'C') {
                str.pop();
            } else {
                str.push(current);
            }
        }
        return str.size();
    }
}
********************************************************************************************************************************************************
************************************************ basic Approach ****************************************************************************************
class Solution {
    public int minLength(String s) {
        boolean flag = true;
        
        while (flag) {
            flag = false; // Set to false initially to check if any replacements are made
            
            int x = s.indexOf("AB");
            if (x >= 0) {
                s = s.substring(0, x) + s.substring(x + 2);
                flag = true; // Found "AB", so set flag to true to continue
            }
            
            int y = s.indexOf("CD");
            if (y >= 0) {
                s = s.substring(0, y) + s.substring(y + 2);
                flag = true; // Found "CD", so set flag to true to continue
            }
        }
        
        return s.length(); // Return the final length after all replacements
    }
}
*******************************************************************************************************************************************************

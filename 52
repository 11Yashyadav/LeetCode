class Solution {
    public int totalNQueens(int n) {
        char[][] avail = new char[n][n];
        for (char[] row : avail) {
            Arrays.fill(row, '.');
        }
        int[] count = new int[1]; // Use an array to hold the count
        arrange(0, avail, count);
        return count[0];
    }

    public static void arrange(int row, char[][] avail, int[] count) {
        if (row == avail.length) {
            count[0]++;
            return;
        }
        for (int i = 0; i < avail.length; i++) {
            if (isSafe(row, i, avail)) {
                avail[row][i] = 'Q';
                arrange(row + 1, avail, count);
                avail[row][i] = '.';
            }
        }
    }

    public static boolean isSafe(int row, int col, char[][] avail) {
        // Check column
        for (int i = row; i >= 0; i--) {
            if (avail[i][col] == 'Q') {
                return false;
            }
        }
        // Check above left diagonal
        for (int i = row, j = col; i >= 0 && j >= 0; i--, j--) {
            if (avail[i][j] == 'Q') {
                return false;
            }
        }
        // Check above right diagonal
        for (int i = row, j = col; i >= 0 && j < avail.length; i--, j++) {
            if (avail[i][j] == 'Q') {
                return false;
            }
        }
        return true;
    }
}

class Solution {
    public int countPaths(int[][] grid) {
        int rows = grid.length;
        int cols = grid[0].length;
        int[][] dp = new int[rows][cols];
        int total = 0;
        for (int i = 0; i < rows; i++) {
            for (int j = 0; j < cols; j++) {
                total = (total + help(grid, dp, i, j, -1)) % 1_000_000_007;
            }
        }
        return total;
    }

    private int help(int[][] grid, int[][] dp, int i, int j, int prev) {
        int rows = grid.length;
        int cols = grid[0].length;
        if (i < 0 || j < 0 || i >= rows || j >= cols || grid[i][j] <= prev)
            return 0;

        if (dp[i][j] != 0)
            return dp[i][j];

        int curr = grid[i][j];
        int left = help(grid, dp, i, j - 1, curr);
        int right = help(grid, dp, i, j + 1, curr);
        int up = help(grid, dp, i - 1, j, curr);
        int down = help(grid, dp, i + 1, j, curr);

        dp[i][j] = (1 + ((left + right) % 1_000_000_007 + (up + down) % 1_000_000_007) % 1_000_000_007) % 1_000_000_007;
        return dp[i][j];
    }
}

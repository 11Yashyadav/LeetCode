class Solution {
    public long countGoodIntegers(int n, int k) {
    int res = 0;
        HashSet<String> set= new HashSet<>();
        int size = (n+1)/2;
        int start = (int)Math.pow(10, size-1);
        int end = (int)Math.pow(10, size) -1;
        for (int i = start; i <= end ; i++) {
            String leftHalf = String.valueOf(i);
            String full;
            String rightHalf;
            if(n%2==0){
                rightHalf = new StringBuilder(leftHalf).reverse().toString();
            }else {
                rightHalf = new StringBuilder(leftHalf.substring(0, leftHalf.length() - 1)).reverse().toString();
            }
            full = leftHalf + rightHalf;
            long num = Long.parseLong(full);
            if(num%k!=0){
                continue;
            }
            char[] arr = full.toCharArray();
            Arrays.sort(arr);
            full = new String(arr);
            set.add(full);
        }
        for (String s : set){
            int[] number = new int[10];
            for (int i = 0; i < s.length(); i++) {
                number[s.charAt(i)-'0']++;
            }
            int totalDigit = s.length();
            int zeros = number[0];
            int nonZeros = totalDigit - zeros;
            int perm = nonZeros * factorial(totalDigit-1);
            for (int i = 0; i < 10; i++) {
                perm/=factorial(number[i]);
            }
            res+=perm;
        }
        return res;
    }
    public static int factorial(int n) {
        int fact = 1;
        for (int i = 2; i <= n; i++) {
            fact *= i;
        }
        return fact;
    }
}

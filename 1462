class Solution {
    public List<Boolean> checkIfPrerequisite(int numCourses, int[][] prerequisites, int[][] queries) {
        Map<Integer, Set<Integer>> mp = new HashMap<>();
        for (int i = 0; i < numCourses; i++) {
            mp.put(i, new HashSet<>());
        }
        for (int[] prereq : prerequisites) {
            mp.get(prereq[1]).add(prereq[0]);
        }
        for (int k = 0; k < numCourses; k++) {
            for (int i = 0; i < numCourses; i++) {
                if (mp.get(i).contains(k)) {
                    mp.get(i).addAll(mp.get(k));
                }
            }
        }
        
        List<Boolean> ans = new ArrayList<>();
        for (int[] query : queries) {
            int prerequisite = query[0];
            int course = query[1];
            ans.add(mp.get(course).contains(prerequisite));
        }
        return ans;
    }
}

******************************************************************************************************************

class Solution {
    public List<Boolean> checkIfPrerequisite(int numCourses, int[][] prerequisites, int[][] queries) {
        List<Boolean> ret = new ArrayList<>();
        if (prerequisites.length == 0) {
            for (int i = 0; i < queries.length; i++) {
                ret.add(false);
            }
            return ret;
        }
        boolean[][] isPrerequisit = new boolean[numCourses][numCourses];
        for (int[] prerequisit : prerequisites) {
            isPrerequisit[prerequisit[0]][prerequisit[1]] = true;
        }
        for (int k = 0; k < numCourses; k++) {
            for (int i = 0; i < numCourses; i++) {
                for (int j = 0; j < numCourses; j++) {
                    if (isPrerequisit[i][k] && isPrerequisit[k][j]) {
                        isPrerequisit[i][j] = true;
                    }
                }
            }
        }
        for (int[] q : queries) {
            ret.add(isPrerequisit[q[0]][q[1]]);
        }
        return ret;
    }
}

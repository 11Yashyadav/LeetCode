/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {
    public TreeNode buildTree(int[] preorder, int[] inorder) {
        return help(preorder, 0, preorder.length-1, inorder, 0, inorder.length-1);
    }

    TreeNode help(int[] preorder, int pstart, int pend, int[] inorder, int instart, int inend) {
        if (pstart > pend || instart > inend) {
            return null;
        }
        TreeNode root = new TreeNode(preorder[pstart]);
        int rootindex = instart;
        while (inorder[rootindex] != preorder[pstart]) {
            rootindex++;
        }
        int leftsize = rootindex - instart;
        root.left = help(preorder, pstart + 1, pstart + leftsize, inorder, instart, rootindex - 1);
        root.right = help(preorder, pstart + leftsize + 1, pend, inorder, rootindex + 1, inend);
        return root;
    }
}

// additional tip we can use hashMap to sore the index of inorder to avoid searching root node

************************************ OPTIMISED SOLUTION *********************************************

class Solution {
    public int[][] mergeArrays(int[][] nums1, int[][] nums2) {
        int n1 = nums1.length, n2 = nums2.length;
        List<int[]> result = new ArrayList<>();
        int p1 = 0, p2 = 0;
        
        while (p1 < n1 && p2 < n2) {
            if (nums1[p1][0] == nums2[p2][0]) {
                result.add(new int[]{nums1[p1][0], nums1[p1][1] + nums2[p2][1]});
                p1++;
                p2++;
            } else if (nums1[p1][0] < nums2[p2][0]) {
                result.add(nums1[p1]);
                p1++;
            } else {
                result.add(nums2[p2]);
                p2++;
            }
        }
        while (p1 < n1) {
            result.add(nums1[p1++]);
        }
        while (p2 < n2) {
            result.add(nums2[p2++]);
        }
        return result.toArray(new int[result.size()][]);
    }
}

*************************************  ALTERNATE SOLUTION **************************************************

class Solution {
    public int[][] mergeArrays(int[][] nums1, int[][] nums2) {
        Map<Integer, Integer> map = new HashMap<>();
        for (int[] num : nums1) {
            map.put(num[0], map.getOrDefault(num[0], 0) + num[1]);
        }
        for (int[] num : nums2) {
            map.put(num[0], map.getOrDefault(num[0], 0) + num[1]);
        }
        int[][] ans = new int[map.size()][2];
        int index = 0;
        for (int key : new TreeSet<>(map.keySet())) {
            ans[index][0] = key;
            ans[index][1] = map.get(key);
            index++;
        }

        return ans;
    }
}

class Solution {
    public List<String> stringMatching(String[] words) {
        List<String> ans = new ArrayList<>();
        int n =words.length;
        for(int i =0;i<n;i++){
            for(int j =0;j<n;j++){
                if(words[j].indexOf(words[i])>=0 && i!=j){
                    ans.add(words[i]);
                    break;
                }
            }
        }
        return ans;
    }
}
***********************  MORE OPPTIMIZE APPROACH ***************************
class Solution {
    public List<String> stringMatching(String[] words) {
        List<String> result = new ArrayList<>();
        for (int i = 0; i < words.length; i++) {
            String curr = words[i];
            if (issub(words, curr, i)) {
                result.add(curr);
            } 
        }
        return result;
    }

    private static boolean issub(String[] words, String curr, int idx) {
        for (int j = 0; j < words.length; j++) {
            if (j == idx)
                continue;
            if (words[j].contains(curr)) {
                return true;
            }
        }
        return false;
    }
}

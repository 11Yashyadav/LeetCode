class Solution {
    public int longestIncreasingPath(int[][] matrix) {
        int rows = matrix.length;
        int cols = matrix[0].length;
        int[][] dp = new int[rows][cols];
        int maxPath = 0;

        for (int i = 0; i < rows; i++) {
            for (int j = 0; j < cols; j++) {
                maxPath = Math.max(maxPath, dfs(matrix, dp, i, j, -1));
            }
        }
        return maxPath;
    }

    private int dfs(int[][] matrix, int[][] dp, int i, int j, int prev) {
        int rows = matrix.length;
        int cols = matrix[0].length;

        if (i < 0 || j < 0 || i >= rows || j >= cols || matrix[i][j] <= prev) {
            return 0;
        }

        if (dp[i][j] != 0) return dp[i][j];

        int curr = matrix[i][j];
        int left = dfs(matrix, dp, i, j - 1, curr);
        int right = dfs(matrix, dp, i, j + 1, curr);
        int up = dfs(matrix, dp, i - 1, j, curr);
        int down = dfs(matrix, dp, i + 1, j, curr);

        dp[i][j] = 1 + Math.max(Math.max(left, right), Math.max(up, down));
        return dp[i][j];
    }
}

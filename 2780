************************************************************************************
class Solution {
    public int minimumIndex(List<Integer> nums) {
        int n = nums.size();
        HashMap<Integer,Integer> mp = new HashMap<>();
        for(int num  : nums){
            mp.put(num , mp.getOrDefault(num, 0)+1 );
        }
        int maxfre=0;
        int maxe=-1;
        for(Map.Entry<Integer,Integer> ent : mp.entrySet()){
            if(ent.getValue() > maxfre){
                maxe = ent.getKey();
                maxfre = ent.getValue();
            }
        }
        if(maxfre*2 < n){
            return -1;
        }
        int left =0;
        for(int i =0;i<n;i++){
            int curr = nums.get(i);
            if(curr==maxe) left++;
            int right = maxfre - left ;
            if(left *2 >(i+1) && right*2 >  (n-i-1)){
                return i;
            }
        }
        return -1;
    }
}
******************************* more optimize solution ****************************
class Solution {
    public int minimumIndex(List<Integer> a) {
        int count = 0;
        int num = -1;
        int n = a.size();

        for(int i = 0; i < a.size(); i++){
            if(count == 0){
                num = a.get(i);
                count++;
            }
            else{
                if(num == a.get(i)) ++count;
                else --count;
            }
        }

        count = 0;
        for(int i = 0; i < n; i++) if(num == a.get(i)) ++count;

        int curr = 0;
        for(int i = 0; i < n; i++){
            if(a.get(i) == num){
                ++curr;
            }
            if(2 * curr > (i + 1) && 2 * (count - curr) > n - i - 1) return i;
        }
        return -1;
    }
}

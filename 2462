class Solution {
    public long totalCost(int[] costs, int k, int candidates) {
        long ans = 0;
        int n = costs.length;
        
        PriorityQueue<Integer> pl = new PriorityQueue<>();
        PriorityQueue<Integer> pr = new PriorityQueue<>();
        
        int l = 0;
        int r = n - 1;

        for (int i = 0; i < candidates && l <= r; i++) {
            pl.add(costs[l++]);
        }

        for (int i = 0; i < candidates && l <= r; i++) {
            pr.add(costs[r--]);
        }

        while (k-- > 0) {
            if (!pl.isEmpty() && (pr.isEmpty() || pl.peek() <= pr.peek())) {
                ans += pl.poll();
                if (l <= r) pl.add(costs[l++]);
            } else {
                ans += pr.poll();
                if (l <= r) pr.add(costs[r--]);
            }
        }
        
        return ans;
    }
}

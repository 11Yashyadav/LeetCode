class Solution {
    public int minZeroArray(int[] nums, int[][] queries) {
        int n = nums.length;
        int[] current = Arrays.copyOf(nums, n);
        boolean allZero = Arrays.stream(current).allMatch(x -> x == 0);
        if (allZero) {
            return 0;
        }
        int left = 1, right = queries.length, ans = -1;
        while (left <= right) {
            int mid = left + (right - left) / 2;
            if (canMakeZero(mid,n,queries,current)) {
                ans = mid;
                right = mid - 1;
            } else {
                left = mid + 1;
            }
        }

        return ans;
    }
    
    boolean canMakeZero(int k,int n , int[][]queries,int []current) {
        int[] diff = new int[n + 1];
        for (int i = 0; i < k; ++i) {
            int l = queries[i][0], r = queries[i][1], val = queries[i][2];
            diff[l] += val;
            if (r + 1 < n) {
                diff[r + 1] -= val;
            }
        }

        int total = 0;
        for (int i = 0; i < n; ++i) {
            total += diff[i];
            if (total < current[i]) {
                return false;
            }
        }
        return true;
    }
}

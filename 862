class Solution {
    public int shortestSubarray(int[] nums, int k) {
        int n = nums.length;
        long[] preSum = new long[n + 1];
        for (int i = 0; i < n; i++) {
            preSum[i + 1] = preSum[i] + nums[i];
        }
        int min = Integer.MAX_VALUE;
        Deque<Integer> de = new LinkedList<>();
        for (int i = 0; i <= n; i++) {
            while (!de.isEmpty() && preSum[i] - preSum[de.peekFirst()] >= k) {
                min = Math.min(min, i - de.pollFirst());
            }
            while (!de.isEmpty() && preSum[i] <= preSum[de.peekLast()]) {
                de.pollLast();
            }
            de.addLast(i);
        }
        return min == Integer.MAX_VALUE ? -1 : min;
    }
}
